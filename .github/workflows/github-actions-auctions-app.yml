name: Auctions App

on:
  push:
    branches:
      - dev

jobs:
  backenddeploymentjob:
    name: auctiondevdeployment
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./slsAuctions
    environment:
      name: test
      url: https://w3cloudstudio.com
    strategy:
      matrix:
        node-version: [20.x]
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci     
    - name: install serverless      
      uses: serverless/github-action@v3.2     
      with:
        args: -c "cd ./slsAuctions && serverless deploy"
        entrypoint: /bin/sh
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  frontenddeploymentjob:
    name: auctions frontend deployment
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ngAuctions
    environment:
      name: test
      url: 'https://w3cloudstudio.com'
    strategy:
      matrix:
        node-version: [20.x]
    steps:
    - uses: actions/checkout@v4
    - name: 'Use Node.js ${{ matrix.node-version }}'
      uses: actions/setup-node@v4
      with:
        node-version: '${{ matrix.node-version }}'
    - run: npm ci
    - name: Setup Cache
      uses: actions/cache@v4
      with: 
        path: ~/.npm
        key: '${{ runner.os }}-node-${{ hashFiles(''**/package-lock.json'') }}'
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Build Angular Application
      run: |
          ls
          npm install -g @angular/cli
          npm install
          ng build

    - name: Copy to S3 Bucket
      run: aws s3 cp ./dist/ng-auctions/browser/*  s3://ng-auctions

    - name: Invalidate CloudFront
      run: |
          aws cloudfront create-invalidation --distribution-id E1KWUSH3MHP4TR --paths "/*"
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


